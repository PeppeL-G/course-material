Below is a program that should:

    Ask the user to enter a positive integer.
    Compute and print the sum of the integers between 0 and the entered integer.

n = int(input("Enter a positive integer: "))
sum = 1
for i in range(n):
  sum = sum + i
print("The sum of the numbers between 0 and "+str(n)+" is "+str(sum)+".")

When Alice runs the program, it does not work as intended. Explain why the program doesn't work they way it should, and suggest what changes that needs to be done to make it work as intended (no need to write any Python code, describing the changes using words is enough).
---
The program doesn't work as it should because of two problems:

1. The sum variable starts on 1 instead of 0, causing the sum to contain one too much.

2. The loop does not include the number n in the iterations, causing the sub to contain n too little.

Changes:
1. Make the sum variable start on 0.
2. Change the range to range(n+1)


=====


Write the following code:

list = []
for k in range(10):
    list.append(k*k + 10)

As a list comprehension expression instead. Your own code should have the exact same meaning as the code above.
---
list = [k*k + 10 for k in range(10)]


=====


Write the following code:

list = []
for c in "Okidoki!":
    if not c.isupper():
        list.append(c)

As a list comprehension expression instead. Your own code should have the exact same meaning as the code above.
---
list = [c for c in "Okidoki!" if not c.isupper()]


=====


Here is a quite complex structure with information about the population in different areas:

populations = {
    "countries": [
        {"name": "Sweden", "population": 9903000},
        {"name": "Finland", "population": 5495000},
        {"name": "Norway", "population": 5233000}
    ],
    "cities": [
        {"name": "Stockholm", "population": 789024},
        {"name": "Jönköping", "population": 122952}
    ]
}

Given this structure, write an expression that evaluates to the population of the city with the name Stockholm, i.e. 789024.

Note: Do not write a statement, and simply writing 789024 is of course not OK; the value needs to be retrieved from the structure.
---
populations["countries"][0]["population"]


=====


Suggest how the following data in Python:

countries = [
   {"name": "Sweden", "population": 9903000},
   {"name": "Finland", "population": 5495000},
   {"name": "Norway", "population": 5233000}
]

Can be written in XML code instead.
---
<countries>
    <country>
        <name>Sweden</name>
        <population>9903000</population>
    </country>
    <country>
        <name>Finland</name>
        <population>5495000</population>
    </country>
    <country>
        <name>Norway</name>
        <population>5233000</population>
    </country>
</countries>


=====


Suggest how the following data in Python:

countries = [
   {"name": "Sweden", "population": 9903000},
   {"name": "Finland", "population": 5495000},
   {"name": "Norway", "population": 5233000}
]

Can be written in CSV format.
---
Sweden,9903000
Finland,5495000
Norway,5233000


=====


The function contains_short_string below should check if the list of strings passed to it contains any string with less than 3 characters. If it does, it should return True, otherwise it should return False.

def contains_short_string(strings):
    for s in strings:
        if len(s) < 3:
            return True
        else:
            return False

At the moment, it does not work as it should. Explain why it does not work as it should, and explain what changes that needs to be made to make it work (do not write an entirely different solution; just describe the changes that needs to be made). There's no need to write any Python code, but if you think that makes your answer more readable, feel free to do that.
---
It does not work as it should because in the first iteration in the for loop it always returns back True or False depending on whether the first string in the list is shorter than 3 characters or not.

To fix the problem: Inside the loop we can only return back True as soon as we find a string that is shorter than 3 characters. We should only return back False after the loop (which is only executed when we have checked all strings without finding one that is shorter than 3 characters).


=====


Implement the function digit_to_string, which receives a digit (an integer between 0 and 9) and should return the name of that digit ("zero", "one" or "two", and so on, all the way up to  "nine").

Sample usage:

digit_to_string(5)  →  "five"
digit_to_string(9)  →  "nine"
---
digit_words = [
    "zero",
    "one",
    "two",
    "three",
    "four",
    "five",
    "size",
    "seven",
    "eight",
    "nine",
]
def digit_to_string(digit_value):
    return digit_words[digit_value]


=====


Write a program that keeps asking the user to enter an integer until the user enters stop. The program should then print whether the user has entered the integer 6 or not.

When running the program, it can look like this (bold text represents text entered by the user).

Enter an integer or stop: 2
Enter an integer or stop: 6
Enter an integer or stop: 4
Enter an integer or stop: stop
You did enter number 6.

Note: The output should look precisely as in the example above (including white-spaces, but with the exception of the boldness from the input, of course) if the user has entered number 6. If the user hasn't entered number 6, display the text You did not enter number 6..

Note: You can expect the user to actually enter a number or stop (no error handling needed).
---
has_entered_six = False
entered_text = ""

while entered_text != "stop":
    entered_text = input("Enter an integer or stop: ")
    if entered_text == "6":
        has_entered_six = True

if has_entered_six:
    print("You did enter number 6.")
else:
    print("You did not enter number 6.")


=====


Implement the function count, which receives a list of numbers, and returns the number of values in the list. You are not allowed to use the len function, but most do the counting yourself using a loop.

Write two different implementations of the function: one using a while loop, and another one using a for loop.

Sample usage:

count([4, 7, 2, 5])  →   4
count([5, 5, 5])     →   3
---
def count(list):
    counter = 0
    for value in list:
        counter = counter + 1
    return counter


=====


Implement the function get_short_strings, which receives a list with strings, and returns a new list containing the strings from the received list that are shorter than 4 characters. To check how many characters a_string contains, you can use len(a_string).

Sample usage:

get_short_strings(["a", "dddd", "ccc", "bb"])  →  ["a", "ccc", "bb"]
get_short_strings(["dddd", "dddd"])  →  []
get_short_strings(["a", "bb", "a"])  →  ["a", "bb", "a"]
---
def get_short_strings(strings):
    short_strings = []
    for string in strings:
        if len(string) < 4:
            short_strings.append(string)
    return short_strings


=====


Given the following data about some movies:

movies = [
    {"title": "GoldenEye",  "year": 1995, "length_in_minutes": 130},
    {"title": "Titanic",    "year": 1997, "length_in_minutes": 195},
    {"title": "I Robot",    "year": 2004, "length_in_minutes": 115},
    {"title": "Braveheart", "year": 1995, "length_in_minutes": 178},
    {"title": "Shrek",      "year": 2001, "length_in_minutes":  90}
]

Write code that computes and prints whether the average length of the movies between 1900 (inclusive) and 1999 (inclusive) are longer or shorter than the average length of the movies between 2000 (inclusive) and 2099 (inclusive).

count_1900 = 0
count_2000 = 0
sum_1900 = 0
sum_2000 = 0

for movie in movies:
    if 1900 <= movie["year"] && movie["year"] <= 1999:
        count_1900 += 1
        sum_1900 += movie["length"]
    elif 2000 <= movie["year"] && movie["year"] <= 2099:
        count_2000 += 1
        sum_2000 += movie["length"]

average_1900 = sum_1900 / count_1900
average_2000 = sum_2000 / count_2000

if average_1900 < average_2000:
    print("Average 1900-1999 is shorter.")
elif average_1900 == average_2000:
    print("Average is the same.")
else:
    print("Average 1900-1999 is longer.")


=====


The class GuessingGame represents a game where a player can guess on a correct number between 0 and 100. It has the following constructor/methods:

Constructor/Method	Description
GuessingGame(correct_number)	Creates a new GuessingGame containg the correct_number the player should guess on.
is_correct(guess)	Returns True if the number guess is the same as the correct number, otherwise False.
is_too_low(guess)	Returns True if the number guess is lower than the correct number, otherwise False.
is_too_high(guess)	Returns True if the number guess is higher than the correct number, otherwise False.

Write a program making use of the class so a user can play the game in a console. The user should keep guessing on the correct number until the user guesses the correct one. The correct number should be 15. When running the code, it can look like this (bold text represents input from the user):

Enter guess: 50
That is too high!
Enter guess: 10
That is too low!
Enter guess: 20
That is too high!
Enter guess: 15
That is correct!

Note: The output should look precisely as in the example above (with the exception of the boldness).

Note: You can expect the user to actually enter a number (no error handling needed).
---
game = GuessingGame(15)
guess = -1

while not game.is_correct(guess):
    guess = int(input("Enter guess:"))
    if game.is_too_low(guess):
        print("That is too low!")
    elif game.is_too_high(guess):
        print("That is too high!")

print("That is correct!")


=====


Another programmer wants you to create the class Countdown that can be used like this:

my_countdown = Countdown(5)
while not my_countdown.is_zero():
    print("Counting down: "+str(my_countdown.get_value()))
    my_countdown.decrease()
print("Kaboom!")

When running the code above, the following should be printed to the console:

Counting down: 5
Counting down: 4
Counting down: 3
Counting down: 2
Counting down: 1
Kaboom!

Write the code implementing the Countdown class so it works as explained above.
---
class Countdown:
    def __init__(self, start_value):
        self.value = start_value
    def decrease(self):
        self.value = self.value - 1
    def is_zero(self):
        return self.value == 0
    def get_value(self):
        return self.value