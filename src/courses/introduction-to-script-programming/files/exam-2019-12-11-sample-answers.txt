Below is a program that should:

    Ask the user to enter two numbers.
    Print the sum of the two numbers.

print("Enter two numbers.")
entered_number_1 = input("The first number: ")
entered_number_2 = input("The second number: ")
print("The sum of the numbers is " + entered_number_1+entered_number_2)

When Alice runs the program, it does not work as intended. Explain why the program doesn't work they way it should, and suggest a solution to make it work (no need to write any Python code, describing the changes using words is enough).
---
The problem is that even though the user enters numbers, e.g. 123 and 456, these will be read as the strings "123" and "456", and when using the + operation on strings you do string concatenation, and not addition of numbers.

To fix this, the user input needs to be converted to numbers (using either the int() function or the float() function), then the sum of the entered numbers can be computed, and then the sum needs to be converted back to a string using the str() function, so it can be concatenated with the string that should be printed.

Description of error: 0.5 points
Description of fix: 0.5 points


=====


Suggest how the following data in Python:

countries = [
   {"name": "Sweden", "population": 9903000},
   {"name": "Finland", "population": 5495000},
   {"name": "Norway", "population": 5233000}
]

Can be written in XML code instead.
---
<countries>
    <country>
        <name>Sweden</name>
        <population>9903000</population>
    </country>
    <country>
        <name>Finland</name>
        <population>5495000</population>
    </country>
    <country>
        <name>Norway</name>
        <population>5233000</population>
    </country>
</countries>

Each type of mistake: -0.25 points
Severe errors: -0.5, -0.75 or -1 points


=====


Suggest how the following data in Python:

countries = [
   {"name": "Sweden", "population": 9903000},
   {"name": "Finland", "population": 5495000},
   {"name": "Norway", "population": 5233000}
]

Can be written in CSV format.
---
Sweden,9903000
Finland,5495000
Norway,5233000

Unnecessary quotes: OK, but bad.
Unnecessary space after comma: OK, but bad.

=====


The function contains_short_string below should check if the list of strings passed to it contains any string with less than 3 characters. If it does, it should return True, otherwise it should return False.

def contains_short_string(strings):
    for s in strings:
        if len(s) < 3:
            return True
        else:
            return False

At the moment, it does not work as it should. Explain why it does not work as it should, and explain what changes that needs to be made to make it work (do not write an entirely different solution; just describe the changes that needs to be made). There's no need to write any Python code, but if you think that makes your answer more readable, feel free to do that.
---
It does not work as it should because in the first iteration in the for loop it always returns back True or False depending on whether the first string in the list is shorter than 3 characters or not.

To fix the problem: Inside the loop we can only return back True as soon as we find a string that is shorter than 3 characters. We should only return back False after the loop (which is only executed when we have checked all strings without finding one that is shorter than 3 characters).

Error explanation: 0.5 points
Fix explanation: 0.5 points

=====


Implement the function string_to_digit, which receives a string with the name of a digit ("zero", "one" or "two", and so on, all the way up to "nine") and returns the digit as an integer.

Sample usage:

string_to_digit("five")  →  5
string_to_digit("nine")  →  9
---
digits_values = {
    "zero": 0,
    "one": 1,
    "two": 2,
    "three": 3,
    "four": 4,
    "five": 5,
    "size": 6,
    "seven": 7,
    "eight": 8,
    "nine": 9,
}
def string_to_digit(digit_word):
    return digits_values[digit_word]

Indentation error: -0.1 points

=====


Write a program that keeps asking the user to enter an integer until the user enters stop. The program should then print the sum of all integers the user has entered, as well as the average number of these integers. When running the program, it can look like this (bold text represents text entered by the user).

Enter an integer or stop: 2
Enter an integer or stop: 6
Enter an integer or stop: 4
Enter an integer or stop: stop
The sum of all integers is 12, and the average number is 4.

Note: The output should look precisely as in the example above (including white-spaces, but with the exception of the boldness from the input, of course).

Note: You can expect the user to actually enter a number or stop (no error handling needed).
---

entered_text = ""
sum = 0
number_of_entered_numbers = 0
while entered_text != "stop":
    entered_text = input("Enter an integer or stop: ")
    if entered_text != "stop":
        entered_number = int(entered_text)
        sum = sum + entered_number
        number_of_entered_numbers = number_of_entered_numbers + 1
average = sum / number_of_entered_numbers
print("The sum of all integers is"+str(sum)+" and the average is "+str(average)+".")

Doesn't/incorrectly computes sum: -1 point
Doesn't/incorrectly computes average: -1 points
Minor mistake: -0.25 points
Tiny mistake: -0.1 points
Other mistake: -(0.5 - 2) points


=====


Implement the function multiply_all, which receives a list of numbers, and returns the product of all those numbers. Write two different implementations of the function: one using a while loop, and another one using a for loop.

Sample usage:

multiply_all([4, 7, 2, 5])  →   4 * 7 * 2 * 5  →  280
multiply_all([5, 5, 5])     →   5 * 5 * 5      →  125
---
def multiply_all(numbers):
    product = 1
    for number in numbers:
        product = product * number
    return product

def multiply_all(numbers):
    product = 1
    index = 0
    while index < len(numbers):
        number = numbers[index]
        product = product * number
        index = index + 1
    return product

Minor mistake: -0.25 points
Tiny mistake: -0.1 points
Other mistake: -(0.5 - 2) points


=====


Implement the function get_even_numbers, which receives a list with numbers, and returns a new list containing the even numbers from the received list. To check if a_number is even, you can use the condition a_number % 2 == 0.

Sample usage:

get_even_numbers([5, 2, 6, 2])  →  [2, 6, 2]
get_even_numbers([99, 4, 12, 5, 9])  →  [4, 12]
get_even_numbers([1, 22, 3, 44, 5, 66])  →  [22, 44, 66]
---
def get_even_numbers(numbers):
    even_numbers = []
    for number in numbers:
        if number % 2 == 0:
            even_numbers.append(number)
    return numbers

Minor mistake: -0.5 points
Tiny mistake: -0.25 points
Other mistake: -(0.75 - 2) points


=====


Given the following data about some movies:

movies = [
    {"title": "GoldenEye",  "year": 1995, "length_in_minutes": 130},
    {"title": "Titanic",    "year": 1997, "length_in_minutes": 195},
    {"title": "Braveheart", "year": 1995, "length_in_minutes": 178},
    {"title": "I Robot",    "year": 2004, "length_in_minutes": 115},
    {"title": "Shrek",      "year": 2001, "length_in_minutes":  90}
]

Write code that computes and print the average length of the movies between the years 1993 (inclusive) and 2001 (exclusive) in minutes.

Note: Your code should still work as expected if one adds a movie to or remove a movie from the list.
---
number_of_movies = 0
length_of_movies = 0

for movie in movies:
    if 1993 <= movie["year"] and movie["year"] < 2001:
        length_of_movies += movie["length_in_minutes"]
        number_of_movies += 1

average_length = length_of_movies / number_of_movies

print(average_length)

Minor mistake: -1 point
Tiny mistake: -0.5 points
Bad code/solution: -0.25 points
Other mistake: -(1.25 - 3) points


=====


The class GuessingGame represents a game where a player can guess on a correct number between 0 and 100. It has the following constructor/methods:

Constructor/Method	Description
GuessingGame(correct_number)	Creates a new GuessingGame containg the correct_number the player should guess on.
is_correct(guess)	Returns True if the number guess is the same as the correct number, otherwise False.
is_too_low(guess)	Returns True if the number guess is lower than the correct number, otherwise False.
is_too_high(guess)	Returns True if the number guess is higher than the correct number, otherwise False.

Write a program making use of the class so a user can play the game in a console. The user should keep guessing on the correct number until the user guesses the correct one. The correct number should be 15. When running the code, it can look like this (bold text represents input from the user):

Enter guess: 50
That is too high!
Enter guess: 10
That is too low!
Enter guess: 20
That is too high!
Enter guess: 15
That is correct!

Note: The output should look precisely as in the example above (with the exception of the boldness).

Note: You can expect the user to actually enter a number (no error handling needed).
---
game = GuessingGame(15)
guess = -1

while not game.is_correct(guess):
    guess = int(input("Enter guess:"))
    if game.is_too_low(guess):
        print("That is too low!")
    elif game.is_too_high(guess):
        print("That is too high!")

print("That is correct!")


=====


Another programmer wants you to create the class Countdown that can be used like this:

my_countdown = Countdown(5)
while not my_countdown.is_zero():
    print("Counting down: "+str(my_countdown.get_value()))
    my_countdown.decrease()
print("Kaboom!")

When running the code above, the following should be printed to the console:

Counting down: 5
Counting down: 4
Counting down: 3
Counting down: 2
Counting down: 1
Kaboom!

Write the code implementing the Countdown class so it works as explained above.
---
class Countdown:
    def __init__(self, start_value):
        self.value = start_value
    def decrease(self):
        self.value = self.value - 1
    def is_zero(self):
        return self.value == 0
    def get_value(self):
        return self.value

0, 0.25 or 0.5 points per constructor/method