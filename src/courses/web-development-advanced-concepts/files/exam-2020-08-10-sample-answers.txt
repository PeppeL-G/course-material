Name three different events that can fire on a webpage, and explain when they fire.
---
submit: When a form is submitted, for example when the user clicks on a submit button in a form.
DOMContentLoaded: When the web browser is done parsing the HTML code on the webpage.
click: When an HTML element is clicked, for example when the user clicks on an anchor element.

1/6 points per correct name.
1/6 points per correct explanation.


=====


Explain the difference between:

document.querySelector('form').addEventListener('submit', handleSubmission)

And:

document.querySelector('form').addEventListener('submit', handleSubmission())
---
In the first example, the function handleSubmission is registered as the event handler.

In the second example, the function handleSubmission is called, and it's return value (which should be a function) is registered as the event handler.

2 points for correct explanation.


=====


Does the code below contain a XSS vulnerability hackers can exploit? Justify your answer.

app.js
// ...
app.get('/sum', function(request, response){
  
  const model = {
    x: request.query.x,
    y: request.query.y,
    sum: request.query.x + request.query.y
  }
  
  response.render("sum.hbs", model)
  
})
// ...

views/sum.hbs
<h1>Sum</h1>
{{{x}}} + {{{y}}} = {{{sum}}}
---
Yes, it contains a XSS vulnerability. For example, a hacker can send a link like the-website.com/sum?x=BAD_HTML_AND_JS_CODE to a user, and if the user visits it the webpage will include the BAD_HTML_AND_JS_CODE the user's web browser will execute, because {{{}}} in handlebars won't escape HTML code.

1 point for saying there's a vulnerability hackers can exploit due to {{{}}}.
1 point for also explaining how hackers could exploit the vulnerability (justification).


=====


Users can on a website create new accounts and then setup their profile page, in which they can write some text other users can see. There they can also select a background color the other users will see when they visit the profile page. Can this be securely implemented? Justify your answer.
---
The intention was to ask about XSS vulnerabilities regarding the background color, but many students interpreted the question to be about a login system instead. Therefor this question is deleted and won't be part of the exam, which in turn changes the max score on the exam, which in turn changes the points required for the different grades.


=====


Does it makes sense to use the body in an HTTP GET request? Justify your answer.
---
No, it does not make sense. A GET request is about retrieving the resource identified by the URI in the request, the body serves no purpose for this.

2 points for valid justification.


=====


Explain what a docker container and a docker image is.
---
A docker image is a description of everything needed to run an application in an isolated environment, including the operating system, the application's code, how to start the application, etc.. A docker container is a thing that can run a docker image, i.e that can run the application in an isolated environment with all its dependencies.

0.5 points for explaining container.
0.5 points for explaining image.


=====


Explain to a web developer that knows nothing about scaling web applications how horizontal scaling works, and how you would solve the problems that comes with it. Be detailed.
---
When a web application running on one server receives more HTTP requests than it can handle, it needs to be scaled so it can handle all HTTP requests. With horizontal scaling, the web application will run on multiple different servers at the same time, and when a client sends an HTTP request, one of the servers running the web application will receive and handle the request. The clients always send their HTTP requests to a "public" server called the "load balancer", and the load balancer is responsible for distributing the load (the HTTP requests) between the servers running the web application by forwarding each HTTP request to one of them (usually different each time).

For this to work, the web application can't be stateful. An example of being stateful is using a global variable that you increment by one each time you receive an HTTP requests to keep track of how many you have received in total. This won't work, because each web application instance won't receive all HTTP requests, only some of them, so the counter won't work. All stateful information (i.e. memory of previous requests) needs to be at a central place stored outside the servers running the web application, so all web application instances use the same global memory, for example in a database on an external server.

1 point for clients sending requests to load balancer.
1 point for load balancer forwards request to servers running the web application.
1 point for explaining and solving the state problem. 


=====


Explain the benefit with vertical scaling compared to horizontal scaling.
---
Vertical scaling is easier to implement and does not require a specific architecture, such as horizontal scaling does with having a load balancer and being stateless.

1 point for correct explanation.
-0.25 points for each wrong explanation.


=====


Carl has just learned that access tokens in a REST API can be implemented as JWT tokens. But he doesn't understand how such a solution is secure when the tokens are given to the clients. Explain to Carl why this is a secure solution. Be detailed.
---
When the server creates a JWT token, it hashes the data in the token together with a secret value only the server knows and computes what is called the signature, which then is also part of the token. So the client obtains the data in the token and the signature.

When the server later obtains the token from a client, it will hash the data in the token again with the same secret value as it used before. If it computes the same signature as in the token, the server can be sure the client hasn't changed the data in the token, because if it had changed, the server would compute a different signature.

If a client wants to change the data in the token and trick the server to trust the token, the client would need to also change the signature in the token to the one the server would compute, but without knowing the secret value the server uses to compute the signature, the client can't compute a valid signature on its own.

2 points for good explanation why clients can't change the data in the token.


=====


In relational databases, explain why it's better to use a foreign key constraint instead of first sending a query to check if a constraint is fulfilled and then go ahead and execute the actual query you wanted to send if the constraint was fulfilled. Also show an example of this with actual queries.
---
To create a new blogpost to an account with a specific id (e.g. 123):

1. Send query to DB to that an account with that id exists:
   SELECT * FROM accounts WHERE id=123
2. Wait for DB response.
3. If account exists, create a new blogpost:
   INSERT INTO blogposts (accountId, title) VALUES (123, "My Post")

The problem here is that the DB response we get back might say that an account with id 123 exists, but before we have done (3), someone else has deleted that account from the database (directly in the database, or another concurrent request), so this is not a secure way to make sure that all blogposts belongs to existing accounts. Therefore it's better to use foreign key constraint in the database, so we don't need to do (1), but we can do (3) directly, and the DB will give us an error if the account doesn't exist.

2 points for correct explanation and sample queries.


=====


Explain how a three-layered architecture works to a web developer that has never used it before. Also explain the benefits with using such an architecture.
---
A three-layered architecture is an architecture of the source code of an application so the source code is divided into the following three different layers:

The Presentation Layer
The Presentation Layer is responsible for implementing the interface through which the user interacts with the application. This includes things such as implementing the graphical user interface (GUI) and reacting to user interactions, such as clicks on GUI elements. For web applications, it means to receive HTTP requests and to send back HTTP responses. To respond to user interactions (to do what the user wants), it tells the next layer, the Business Logic Layer, what to to.

The Business Logic Layer
The Business Logic Layer is responsible for implementing the business logic rules of the application, such as computations, validations, authorizations, etc. When the Presentation Layer tells it to do something, the Business Logic Layer will do that and then report back the result to the Presentation Layer. To carry out the things the Presentation Layer requests of it, the Business Logic Layer can use the Data Access Layer to store/retrieve/update/delete data.

The Data Access Layer
The Data Access Layer is responsible for providing access to the data the application needs to store, for example in a database. For web applications, the data is usually the resources available on the website.

Some benefits with structuring the source code like this:
 - Easy to understand how the code works, since each part of the code has a well defined responsibility (for example, code in the Data Access Layer could be the only part of the code responsible for communicating with a database, and, for example, when writing code in the Business Logic Layer you don't need to worry about implementation details in the Data Access Layer (relying on abstraction)).
 - Easy to test the code, since each layer can be tested independently from the other layers (for example, to test the code in the Business Logic Layer, we can use a small mockup of the Data Access Layer, so it's really (almost) only the code in the Business Logic Layer we test).
 - Programmers can easily work on the application concurrently by working on different layers at the same time. It's easy to distribute the work among experts, for example a database expert can implement the Data Access Layer and a web design expert can implement the Presentation Layer.

Layer name: 0.33 points each.
Layer responsibility: 0.33 points each.
Benefits: 1 point
Quality: 1 point


=====


In a three layered architecture, give an example of an implementation detail that should not be exposed to the next layer. Choose whichever layer you want. Justify your answer.
---
For example, the Data Access Layer should not expose implementation details about which type of database (e.g. MySQL, PostgreSQL, etc.) it uses, because if an outer layer starts to be dependent on one such detail (for example a specific error code), the application can't change which database to use by only changing the code in the Data Access Layer, but also need to change code in other layers, which it shouldn't need to.

1 point good example and justification.


=====


In an SPA, the following code is available to load and display the latest 5 news items from the server:

<div id="div-news-1"></div>
<div id="div-news-2"></div>
<div id="div-news-3"></div>
<div id="div-news-4"></div>
<div id="div-news-5"></div>

<script>
function getNewsItem(number, callback){
  // Fetch the news item with the given number asynchronously
  // from the server and then pass it to the callback function.
  callback(theFetchedNewsItem)
}

function showNewsItem(number, newsItem){
  document.getElementById("div-news-"+number).innerText = newsItem
}
</script>

Before, to actually load the news, the following code was used:

getNewsItem(1, function(newsItem){ showNewsItem(1, newsItem) })
getNewsItem(2, function(newsItem){ showNewsItem(2, newsItem) })
getNewsItem(3, function(newsItem){ showNewsItem(3, newsItem) })
getNewsItem(4, function(newsItem){ showNewsItem(4, newsItem) })
getNewsItem(5, function(newsItem){ showNewsItem(5, newsItem) })

A smart programmer realized that we're basically doing the same thing over and over again 5 times, so he figured he could replace this code with a for loop, like this:

for(var i=1; i<=5; i++){
  getNewsItem(i, function(newsItem){ showNewsItem(i, newsItem) })
}

However, the programmer never gets this code with the loop to function properly. Explain (as a comment) how that code works and what the problem with it is, and then re-write that part of the code so it functions as it should.
---
The problem is that when the callback function passed to getNewsItem:

function(newsItem){ showNewsItem(i, newsItem) }

is called, the loop has done all of its iterations and the "i" variable is 6 in all the callbacks, and not 1, 2, 3, 4 and 5 respectively.

One solution is to use a "let" variable as the iteration variable, instead of "var":

for(let i=1; i<=5; i++){
  getNewsItem(i, function(newsItem){ showNewsItem(i, newsItem) })
}

1 point correct explanation of code and problem.
1 point correct solution.


=====


The function getBookById(id, callback) can be used to fetch a book with a specific id asynchronously from the server like this:

getBookById(123, function(book){
  // Do something with the book...
})

Create the function getBooks(callback), that fetches and places the books with the id 1, 2, 3, 4 and 5 in an array and then passes that array to the callback function, so it can be used like this:

getBooks(function(books){
  // Do something with the books.
})

Implement two different versions of getBooks(callback), one that fetches the books in parallel, and one that fetches books in sequential order (e.g. fetches the book with id 1 before it fetches the book with id 2, and so on). Indicate which version is which.

The order of the books in the array is not important.
---
// Fetch sequential.
function getBooks(callback){
	
	const books = []
	
	getBookById(1, onBookFetched)
	
	function onBookFetched(book){
		books.push(book)
		if(books.length == 5){
			callback(books)
		}else{
			getBookById(books.length+1, onBookFetched)
		}
	}
	
}

// Fetch parallel.
function getBooks(callback){
	
	const books = []
	
	getBookById(1, onBookFetched)
	getBookById(2, onBookFetched)
	getBookById(3, onBookFetched) // Can use loop here...
	getBookById(4, onBookFetched)
	getBookById(5, onBookFetched)
	
	function onBookFetched(book){
		books.push(book)
		if(books.length == 5){
			callback(books)
		}
	}
	
}

0 points for solution not being asynchronous.
2 points for correct sequential.
2 points for correct parallel.
