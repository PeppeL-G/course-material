import { _ as _export_sfc, r as resolveComponent, o as openBlock, c as createElementBlock, a as createBaseVNode, b as createTextVNode, d as createVNode, f as createStaticVNode } from "./app-8331cbf7.js";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h1 id="tutorials" tabindex="-1"><a class="header-anchor" href="#tutorials" aria-hidden="true">#</a> Tutorials</h1><p>Here you will find material from the different tutorials.</p><h2 id="tutorial-1-jetpack-compose-basics" tabindex="-1"><a class="header-anchor" href="#tutorial-1-jetpack-compose-basics" aria-hidden="true">#</a> Tutorial 1: Jetpack Compose Basics</h2><p><code>Text()</code>, <code>Box()</code>, <code>Row()</code> and <code>Column()</code>.</p><h3 id="example-of-using-box" tabindex="-1"><a class="header-anchor" href="#example-of-using-box" aria-hidden="true">#</a> Example of using <code>Box</code></h3><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Composable</span>\n<span class="token annotation builtin">@Preview</span><span class="token punctuation">(</span>\n    widthDp <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">,</span>\n    heightDp <span class="token operator">=</span> <span class="token number">300</span>\n<span class="token punctuation">)</span>\n<span class="token keyword">fun</span> <span class="token function">AppScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">Box</span><span class="token punctuation">(</span>\n        modifier <span class="token operator">=</span> Modifier\n            <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>Red<span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">fillMaxSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">)</span><span class="token punctuation">{</span>\n        \n        <span class="token function">Text</span><span class="token punctuation">(</span>\n            text <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;X&quot;</span></span><span class="token punctuation">,</span>\n            modifier <span class="token operator">=</span> Modifier\n                <span class="token punctuation">.</span><span class="token function">align</span><span class="token punctuation">(</span>Alignment<span class="token punctuation">.</span>TopEnd<span class="token punctuation">)</span>\n        <span class="token punctuation">)</span>\n        \n        <span class="token function">Text</span><span class="token punctuation">(</span>\n            text <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Once upon a time&quot;</span></span><span class="token punctuation">,</span>\n            modifier <span class="token operator">=</span> Modifier\n                <span class="token punctuation">.</span><span class="token function">align</span><span class="token punctuation">(</span>Alignment<span class="token punctuation">.</span>Center<span class="token punctuation">)</span>\n        <span class="token punctuation">)</span>\n        \n        <span class="token function">Text</span><span class="token punctuation">(</span>\n            text <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;&lt;--&quot;</span></span><span class="token punctuation">,</span>\n            modifier <span class="token operator">=</span> Modifier\n                <span class="token punctuation">.</span><span class="token function">align</span><span class="token punctuation">(</span>Alignment<span class="token punctuation">.</span>BottomStart<span class="token punctuation">)</span>\n        <span class="token punctuation">)</span>\n        \n        <span class="token function">Text</span><span class="token punctuation">(</span>\n            text <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;5&quot;</span></span><span class="token punctuation">,</span>\n            modifier <span class="token operator">=</span> Modifier\n                <span class="token punctuation">.</span><span class="token function">align</span><span class="token punctuation">(</span>Alignment<span class="token punctuation">.</span>BottomCenter<span class="token punctuation">)</span>\n        <span class="token punctuation">)</span>\n        \n        <span class="token function">Text</span><span class="token punctuation">(</span>\n            text <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;--&gt;&quot;</span></span><span class="token punctuation">,</span>\n            modifier <span class="token operator">=</span> Modifier\n                <span class="token punctuation">.</span><span class="token function">align</span><span class="token punctuation">(</span>Alignment<span class="token punctuation">.</span>BottomEnd<span class="token punctuation">)</span>\n        <span class="token punctuation">)</span>\n        \n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="example-of-nesting-column-and-row" tabindex="-1"><a class="header-anchor" href="#example-of-nesting-column-and-row" aria-hidden="true">#</a> Example of nesting <code>Column()</code> and <code>Row()</code></h3><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Composable</span>\n<span class="token annotation builtin">@Preview</span><span class="token punctuation">(</span>\n    widthDp <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">,</span>\n    heightDp <span class="token operator">=</span> <span class="token number">300</span>\n<span class="token punctuation">)</span>\n<span class="token keyword">fun</span> <span class="token function">AppScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">Column</span><span class="token punctuation">(</span>\n        modifier <span class="token operator">=</span> Modifier\n            <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>Red<span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">fillMaxSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        verticalArrangement <span class="token operator">=</span> Arrangement<span class="token punctuation">.</span>SpaceBetween\n    <span class="token punctuation">)</span><span class="token punctuation">{</span>\n        \n        <span class="token function">Text</span><span class="token punctuation">(</span>\n            text <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;X&quot;</span></span><span class="token punctuation">,</span>\n            modifier <span class="token operator">=</span> Modifier\n                <span class="token punctuation">.</span><span class="token function">align</span><span class="token punctuation">(</span>Alignment<span class="token punctuation">.</span>End<span class="token punctuation">)</span>\n        <span class="token punctuation">)</span>\n        \n        <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Once upon a time&quot;</span></span><span class="token punctuation">,</span>\n            modifier <span class="token operator">=</span> Modifier\n                <span class="token punctuation">.</span><span class="token function">align</span><span class="token punctuation">(</span>Alignment<span class="token punctuation">.</span>CenterHorizontally<span class="token punctuation">)</span>\n        <span class="token punctuation">)</span>\n        \n        <span class="token function">Row</span><span class="token punctuation">(</span>\n            modifier <span class="token operator">=</span> Modifier\n                <span class="token punctuation">.</span><span class="token function">fillMaxWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            horizontalArrangement <span class="token operator">=</span> Arrangement<span class="token punctuation">.</span>SpaceBetween\n        <span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token function">Text</span><span class="token punctuation">(</span>text <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;&lt;--&quot;</span></span><span class="token punctuation">)</span>\n            <span class="token function">Text</span><span class="token punctuation">(</span>text <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;5&quot;</span></span><span class="token punctuation">)</span>\n            <span class="token function">Text</span><span class="token punctuation">(</span>text <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;--&gt;&quot;</span></span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n        \n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="tutorial-2-jetpack-compose-state" tabindex="-1"><a class="header-anchor" href="#tutorial-2-jetpack-compose-state" aria-hidden="true">#</a> Tutorial 2: Jetpack Compose State</h2><p><code>LazyColumn()</code>, state and <code>NavHost()</code>.</p><h3 id="example-of-a-layout" tabindex="-1"><a class="header-anchor" href="#example-of-a-layout" aria-hidden="true">#</a> Example of a layout</h3><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Composable</span>\n<span class="token keyword">fun</span> <span class="token function">AppScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    \n    <span class="token function">Column</span><span class="token punctuation">(</span>\n        modifier <span class="token operator">=</span> Modifier\n            <span class="token punctuation">.</span><span class="token function">fillMaxSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>Red<span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">.</span>dp<span class="token punctuation">)</span>\n    <span class="token punctuation">)</span><span class="token punctuation">{</span>\n            \n        <span class="token function">Text</span><span class="token punctuation">(</span>\n            text <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Main Content&quot;</span></span><span class="token punctuation">,</span>\n            modifier <span class="token operator">=</span> Modifier\n                <span class="token punctuation">.</span><span class="token function">weight</span><span class="token punctuation">(</span><span class="token number">1f</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">fillMaxWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>Blue<span class="token punctuation">)</span>\n        <span class="token punctuation">)</span>\n            \n        <span class="token function">Row</span><span class="token punctuation">(</span>\n            horizontalArrangement <span class="token operator">=</span> Arrangement<span class="token punctuation">.</span>SpaceAround<span class="token punctuation">,</span>\n            modifier <span class="token operator">=</span> Modifier\n                <span class="token punctuation">.</span><span class="token function">fillMaxWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>Yellow<span class="token punctuation">)</span>\n        <span class="token punctuation">)</span><span class="token punctuation">{</span>\n            \n            <span class="token function">Button</span><span class="token punctuation">(</span>onClick <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Option 1&quot;</span></span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n            \n            <span class="token function">Button</span><span class="token punctuation">(</span>onClick <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Option 2&quot;</span></span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n            \n            <span class="token function">Button</span><span class="token punctuation">(</span>onClick <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Option 3&quot;</span></span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        \n    <span class="token punctuation">}</span>\n    \n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="example-of-using-lazycolumn" tabindex="-1"><a class="header-anchor" href="#example-of-using-lazycolumn" aria-hidden="true">#</a> Example of using <code>LazyColumn</code></h3><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Human</span><span class="token punctuation">(</span>\n    <span class="token keyword">val</span> id<span class="token operator">:</span> Int<span class="token punctuation">,</span>\n    <span class="token keyword">val</span> name<span class="token operator">:</span> String<span class="token punctuation">,</span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">val</span> humans <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span>\n    <span class="token function">Human</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;Alice&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function">Human</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;Bob&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function">Human</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;Claire&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span>\n\n<span class="token annotation builtin">@Composable</span>\n<span class="token keyword">fun</span> <span class="token function">AppScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    \n    LazyColumn<span class="token punctuation">{</span>\n        \n        item<span class="token punctuation">{</span>\n            <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Below are human names.&quot;</span></span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n        \n        <span class="token function">items</span><span class="token punctuation">(</span>humans<span class="token punctuation">)</span><span class="token punctuation">{</span>human <span class="token operator">-&gt;</span>\n            <span class="token function">Text</span><span class="token punctuation">(</span>human<span class="token punctuation">.</span>name<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n        \n        item<span class="token punctuation">{</span>\n            <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Above are human names.&quot;</span></span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n        \n    <span class="token punctuation">}</span>\n    \n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="example-of-using-state-counter" tabindex="-1"><a class="header-anchor" href="#example-of-using-state-counter" aria-hidden="true">#</a> Example of using state (counter)</h3><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Composable</span>\n<span class="token keyword">fun</span> <span class="token function">AppScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    \n    <span class="token keyword">var</span> counter <span class="token keyword">by</span> rememberSaveable <span class="token punctuation">{</span>\n        <span class="token function">mutableStateOf</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    \n    <span class="token function">Button</span><span class="token punctuation">(</span>onClick <span class="token operator">=</span> <span class="token punctuation">{</span> counter<span class="token operator">++</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">Text</span><span class="token punctuation">(</span>counter<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    \n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="example-of-using-navhost" tabindex="-1"><a class="header-anchor" href="#example-of-using-navhost" aria-hidden="true">#</a> Example of using <code>NavHost</code></h3>', 17);
const _hoisted_18 = {
  href: "https://developer.android.com/jetpack/compose/navigation#setup",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_19 = /* @__PURE__ */ createStaticVNode('<div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Human</span><span class="token punctuation">(</span>\n    <span class="token keyword">val</span> id<span class="token operator">:</span> Int<span class="token punctuation">,</span>\n    <span class="token keyword">val</span> name<span class="token operator">:</span> String<span class="token punctuation">,</span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">val</span> humans <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span>\n    <span class="token function">Human</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;Alice&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function">Human</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;Bob&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function">Human</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;Claire&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span>\n\n<span class="token annotation builtin">@Composable</span>\n<span class="token keyword">fun</span> <span class="token function">AppScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">val</span> navController <span class="token operator">=</span> <span class="token function">rememberNavController</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    \n    <span class="token comment">// Wrap the NavHost in its own layout if you want.</span>\n    <span class="token function">NavHost</span><span class="token punctuation">(</span>\n        navController <span class="token operator">=</span> navController<span class="token punctuation">,</span>\n        startDestination <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;viewAll&quot;</span></span>\n    <span class="token punctuation">)</span><span class="token punctuation">{</span>\n\n        <span class="token function">composable</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;viewAll&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token function">ViewAllScreen</span><span class="token punctuation">(</span>navController<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token function">composable</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;viewOne/{id}&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">val</span> id <span class="token operator">=</span> it<span class="token punctuation">.</span>arguments<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;id&quot;</span></span><span class="token punctuation">)</span><span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token function">ViewOneScreen</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n\n    <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span>\n\n<span class="token annotation builtin">@Composable</span>\n<span class="token keyword">fun</span> <span class="token function">ViewAllScreen</span><span class="token punctuation">(</span>navController<span class="token operator">:</span> NavHostController<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    LazyColumn<span class="token punctuation">{</span>\n        <span class="token function">items</span><span class="token punctuation">(</span>humans<span class="token punctuation">)</span><span class="token punctuation">{</span>human <span class="token operator">-&gt;</span>\n            <span class="token function">Button</span><span class="token punctuation">(</span>onClick <span class="token operator">=</span> <span class="token punctuation">{</span> navController<span class="token punctuation">.</span><span class="token function">navigate</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;viewOne/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token expression">human<span class="token punctuation">.</span>id</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token function">Text</span><span class="token punctuation">(</span>human<span class="token punctuation">.</span>name<span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token annotation builtin">@Composable</span>\n<span class="token keyword">fun</span> <span class="token function">ViewOneScreen</span><span class="token punctuation">(</span>id<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">val</span> human <span class="token operator">=</span> humans<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">{</span> it<span class="token punctuation">.</span>id <span class="token operator">==</span> id <span class="token punctuation">}</span><span class="token operator">!!</span>\n\n    <span class="token function">Text</span><span class="token punctuation">(</span>\n        text <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token expression">human<span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> has id </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token expression">human<span class="token punctuation">.</span>id</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.&quot;</span></span>\n    <span class="token punctuation">)</span>\n\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="martin-s-gui-lecture" tabindex="-1"><a class="header-anchor" href="#martin-s-gui-lecture" aria-hidden="true">#</a> Martin&#39;s GUI Lecture</h2>', 2);
const _hoisted_21 = {
  href: "https://ju.instructure.com/files/1121481/download?download_frd=1",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_22 = /* @__PURE__ */ createStaticVNode('<h2 id="tutorial-3-long-running-operations" tabindex="-1"><a class="header-anchor" href="#tutorial-3-long-running-operations" aria-hidden="true">#</a> Tutorial 3: Long running operations</h2><p>Threads, coroutines and ViewModel. <code>Thread.sleep()</code> and <code>delay()</code> are used to simulate &quot;waiting for response from server&quot;.</p><h3 id="example-with-frozen-gui" tabindex="-1"><a class="header-anchor" href="#example-with-frozen-gui" aria-hidden="true">#</a> Example with frozen GUI</h3><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Composable</span>\n<span class="token keyword">fun</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    \n    <span class="token keyword">var</span> counter <span class="token keyword">by</span> remember<span class="token punctuation">{</span>\n        <span class="token function">mutableStateOf</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">var</span> randomNumber <span class="token keyword">by</span> remember<span class="token punctuation">{</span>\n        <span class="token function">mutableStateOf</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    \n    <span class="token function">Column</span><span class="token punctuation">(</span>modifier <span class="token operator">=</span> Modifier<span class="token punctuation">.</span><span class="token function">fillMaxSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        \n        <span class="token function">Button</span><span class="token punctuation">(</span>onClick <span class="token operator">=</span> <span class="token punctuation">{</span>\n            counter<span class="token operator">++</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">Text</span><span class="token punctuation">(</span>text <span class="token operator">=</span> counter<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n        \n        <span class="token function">Button</span><span class="token punctuation">(</span>onClick <span class="token operator">=</span> <span class="token punctuation">{</span>\n            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span> <span class="token comment">// This freezes the GUI!</span>\n            randomNumber <span class="token operator">=</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">Text</span><span class="token punctuation">(</span>text <span class="token operator">=</span> randomNumber<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    \n    <span class="token punctuation">}</span>\n    \n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="example-of-using-background-thread" tabindex="-1"><a class="header-anchor" href="#example-of-using-background-thread" aria-hidden="true">#</a> Example of using background thread</h3><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Composable</span>\n<span class="token keyword">fun</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    \n    <span class="token keyword">var</span> counter <span class="token keyword">by</span> remember<span class="token punctuation">{</span>\n        <span class="token function">mutableStateOf</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">var</span> randomNumber <span class="token keyword">by</span> remember<span class="token punctuation">{</span>\n        <span class="token function">mutableStateOf</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    \n    <span class="token function">Column</span><span class="token punctuation">(</span>modifier <span class="token operator">=</span> Modifier<span class="token punctuation">.</span><span class="token function">fillMaxSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        \n        <span class="token function">Button</span><span class="token punctuation">(</span>onClick <span class="token operator">=</span> <span class="token punctuation">{</span>\n            counter<span class="token operator">++</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">Text</span><span class="token punctuation">(</span>text <span class="token operator">=</span> counter<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n        \n        <span class="token function">Button</span><span class="token punctuation">(</span>onClick <span class="token operator">=</span> <span class="token punctuation">{</span>\n            thread<span class="token punctuation">{</span> <span class="token comment">// Starts a new thread.</span>\n                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span> <span class="token comment">// The main thread not affected by this, GUI not frozen!</span>\n                randomNumber <span class="token operator">=</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">Text</span><span class="token punctuation">(</span>text <span class="token operator">=</span> randomNumber<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n        \n    <span class="token punctuation">}</span>\n    \n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="example-of-using-coroutine" tabindex="-1"><a class="header-anchor" href="#example-of-using-coroutine" aria-hidden="true">#</a> Example of using coroutine</h3><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Composable</span>\n<span class="token keyword">fun</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    \n    <span class="token comment">// Get a coroutine scope that automatically stops running when</span>\n    <span class="token comment">// This component instance is not used anymore.</span>\n    <span class="token keyword">val</span> coroutineScope <span class="token operator">=</span> <span class="token function">rememberCoroutineScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    \n    <span class="token keyword">var</span> counter <span class="token keyword">by</span> remember<span class="token punctuation">{</span>\n        <span class="token function">mutableStateOf</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">var</span> randomNumber <span class="token keyword">by</span> remember<span class="token punctuation">{</span>\n        <span class="token function">mutableStateOf</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    \n    <span class="token function">Column</span><span class="token punctuation">(</span>modifier <span class="token operator">=</span> Modifier<span class="token punctuation">.</span><span class="token function">fillMaxSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        \n        <span class="token function">Button</span><span class="token punctuation">(</span>onClick <span class="token operator">=</span> <span class="token punctuation">{</span>\n            counter<span class="token operator">++</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">Text</span><span class="token punctuation">(</span>text <span class="token operator">=</span> counter<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n        \n        <span class="token function">Button</span><span class="token punctuation">(</span>onClick <span class="token operator">=</span> <span class="token punctuation">{</span>\n            coroutineScope<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>IO<span class="token punctuation">)</span><span class="token punctuation">{</span>\n                 <span class="token comment">// The code here will be executed on a background thread,</span>\n                 <span class="token comment">// and the thread can do execute other coroutines while</span>\n                 <span class="token comment">// waiting in delay().</span>\n                <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span>\n                randomNumber <span class="token operator">=</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">Text</span><span class="token punctuation">(</span>text <span class="token operator">=</span> randomNumber<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n        \n    <span class="token punctuation">}</span>\n    \n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="example-of-using-launchedeffect" tabindex="-1"><a class="header-anchor" href="#example-of-using-launchedeffect" aria-hidden="true">#</a> Example of using <code>LaunchedEffect()</code></h3><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Composable</span>\n<span class="token keyword">fun</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    \n    <span class="token keyword">val</span> coroutineScope <span class="token operator">=</span> <span class="token function">rememberCoroutineScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    \n    <span class="token keyword">var</span> counter <span class="token keyword">by</span> remember<span class="token punctuation">{</span>\n        <span class="token function">mutableStateOf</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">var</span> randomNumber <span class="token keyword">by</span> remember<span class="token punctuation">{</span>\n        <span class="token function">mutableStateOf</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    \n    <span class="token comment">// When the App() instance is created, also run the coroutine.</span>\n    <span class="token function">LaunchedEffect</span><span class="token punctuation">(</span>Unit<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        \n        coroutineScope<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>IO<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>\n                randomNumber <span class="token operator">=</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n            <span class="token comment">// The coroutine will automatically stop when the coroutine scope stops</span>\n            <span class="token comment">// (i.e. when the App() instance is not used anymore).</span>\n            <span class="token comment">// (bad solution in Android due to runtime configuration changes)</span>\n        <span class="token punctuation">}</span>\n        \n    <span class="token punctuation">}</span>\n    \n    <span class="token function">Column</span><span class="token punctuation">(</span>modifier <span class="token operator">=</span> Modifier<span class="token punctuation">.</span><span class="token function">fillMaxSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        \n        <span class="token function">Button</span><span class="token punctuation">(</span>onClick <span class="token operator">=</span> <span class="token punctuation">{</span>\n            counter<span class="token operator">++</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">Text</span><span class="token punctuation">(</span>text <span class="token operator">=</span> counter<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n        \n        <span class="token function">Button</span><span class="token punctuation">(</span>onClick <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">Text</span><span class="token punctuation">(</span>text <span class="token operator">=</span> randomNumber<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n        \n    <span class="token punctuation">}</span>\n    \n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="example-of-using-viewmodel" tabindex="-1"><a class="header-anchor" href="#example-of-using-viewmodel" aria-hidden="true">#</a> Example of using <code>ViewModel</code></h2><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> <span class="token function">AppViewModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">ViewModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    \n    <span class="token comment">// No need to use remember(), since view models survive recompositions.</span>\n    <span class="token comment">// No need to use rememberSaveable, since view models survive runtime configuration changes.</span>\n    <span class="token comment">// and runtime configuration changes.</span>\n    <span class="token keyword">var</span> counter <span class="token keyword">by</span> <span class="token function">mutableStateOf</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n    <span class="token keyword">var</span> randomNumber <span class="token keyword">by</span> <span class="token function">mutableStateOf</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">)</span>\n    \n    <span class="token keyword">init</span> <span class="token punctuation">{</span>\n        \n        <span class="token comment">// ViewModelScope will stop when the view model is not used by anyone.</span>\n        viewModelScope<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>IO<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span>\n                randomNumber <span class="token operator">=</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        \n    <span class="token punctuation">}</span>\n    \n    <span class="token keyword">fun</span> <span class="token function">generateRandomNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        \n        viewModelScope<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>IO<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>\n            randomNumber <span class="token operator">=</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n        \n    <span class="token punctuation">}</span>\n    \n<span class="token punctuation">}</span>\n\n<span class="token annotation builtin">@Composable</span>\n<span class="token keyword">fun</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    \n    <span class="token comment">// Get a view model that survives runtime configuration changes.</span>\n    <span class="token keyword">val</span> model<span class="token operator">:</span> AppViewModel <span class="token operator">=</span> <span class="token function">viewModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    \n    <span class="token function">Column</span><span class="token punctuation">(</span>modifier <span class="token operator">=</span> Modifier<span class="token punctuation">.</span><span class="token function">fillMaxSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        \n        <span class="token function">Button</span><span class="token punctuation">(</span>onClick <span class="token operator">=</span> <span class="token punctuation">{</span>\n            model<span class="token punctuation">.</span>counter<span class="token operator">++</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">Text</span><span class="token punctuation">(</span>text <span class="token operator">=</span> model<span class="token punctuation">.</span>counter<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n        \n        <span class="token function">Button</span><span class="token punctuation">(</span>onClick <span class="token operator">=</span> <span class="token punctuation">{</span>\n            model<span class="token punctuation">.</span><span class="token function">generateRandomNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">Text</span><span class="token punctuation">(</span>text <span class="token operator">=</span> model<span class="token punctuation">.</span>randomNumber<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n        \n    <span class="token punctuation">}</span>\n    \n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="example-of-not-using-jetpack-compose-in-viewmodel" tabindex="-1"><a class="header-anchor" href="#example-of-not-using-jetpack-compose-in-viewmodel" aria-hidden="true">#</a> Example of not using Jetpack Compose in <code>ViewModel</code></h3><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> <span class="token function">AppViewModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">ViewModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    \n    <span class="token comment">// No Jetpack Compose dependency, only Kotlin dependency.</span>\n    <span class="token keyword">var</span> counter <span class="token operator">=</span> <span class="token function">MutableStateFlow</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n    <span class="token keyword">var</span> randomNumber <span class="token operator">=</span> <span class="token function">MutableStateFlow</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">)</span>\n    \n    <span class="token keyword">init</span> <span class="token punctuation">{</span>\n        \n        viewModelScope<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>IO<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span>\n                randomNumber<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        \n    <span class="token punctuation">}</span>\n    \n    <span class="token keyword">fun</span> <span class="token function">generateRandomNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        \n        viewModelScope<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>IO<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>\n            randomNumber<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n        \n    <span class="token punctuation">}</span>\n    \n<span class="token punctuation">}</span>\n\n<span class="token annotation builtin">@Composable</span>\n<span class="token keyword">fun</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    \n    <span class="token keyword">val</span> model<span class="token operator">:</span> AppViewModel <span class="token operator">=</span> <span class="token function">viewModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    \n    <span class="token comment">// Tell Jetpack Compose to observe changes to MutableStateFlow in the model.</span>\n    <span class="token keyword">val</span> counter <span class="token keyword">by</span> model<span class="token punctuation">.</span>counter<span class="token punctuation">.</span><span class="token function">collectAsState</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">val</span> randomNumber <span class="token keyword">by</span> model<span class="token punctuation">.</span>randomNumber<span class="token punctuation">.</span><span class="token function">collectAsState</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    \n    <span class="token function">Column</span><span class="token punctuation">(</span>modifier <span class="token operator">=</span> Modifier<span class="token punctuation">.</span><span class="token function">fillMaxSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        \n        <span class="token function">Button</span><span class="token punctuation">(</span>onClick <span class="token operator">=</span> <span class="token punctuation">{</span>\n            model<span class="token punctuation">.</span>counter<span class="token punctuation">.</span>value<span class="token operator">++</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">Text</span><span class="token punctuation">(</span>text <span class="token operator">=</span> counter<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n        \n        <span class="token function">Button</span><span class="token punctuation">(</span>onClick <span class="token operator">=</span> <span class="token punctuation">{</span>\n            model<span class="token punctuation">.</span><span class="token function">generateRandomNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">Text</span><span class="token punctuation">(</span>text <span class="token operator">=</span> randomNumber<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n        \n    <span class="token punctuation">}</span>\n    \n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>', 14);
function _sfc_render(_ctx, _cache) {
  const _component_ExternalLinkIcon = resolveComponent("ExternalLinkIcon");
  return openBlock(), createElementBlock("div", null, [
    _hoisted_1,
    createBaseVNode("p", null, [
      createTextVNode("You need to "),
      createBaseVNode("a", _hoisted_18, [
        createTextVNode("add the navigation-compose library"),
        createVNode(_component_ExternalLinkIcon)
      ]),
      createTextVNode(" first.")
    ]),
    _hoisted_19,
    createBaseVNode("p", null, [
      createBaseVNode("a", _hoisted_21, [
        createTextVNode("The slides"),
        createVNode(_component_ExternalLinkIcon)
      ]),
      createTextVNode(".")
    ]),
    _hoisted_22
  ]);
}
const tutorials_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "tutorials.html.vue"]]);
export {
  tutorials_html as default
};
