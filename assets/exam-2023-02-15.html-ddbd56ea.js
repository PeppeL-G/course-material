import { _ as _export_sfc, o as openBlock, c as createElementBlock, f as createStaticVNode } from "./app-8331cbf7.js";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h1 id="exam-2023-02-15" tabindex="-1"><a class="header-anchor" href="#exam-2023-02-15" aria-hidden="true">#</a> Exam 2023-02-15</h1><p>Here you find the questions, sample answers and marking guidelines for the exam 2023-02-15.</p><h2 id="information" tabindex="-1"><a class="header-anchor" href="#information" aria-hidden="true">#</a> Information</h2><p>Start by reading through all questions. Peter will not visit the exam. If you find any question unclear, ask one of the exam administrators (<em>tentavakt</em> in Swedish) to call Peter, and he will clarify the question over the phone.</p><p>Max score is 25 points.</p><ul><li>For grade 3, 40% of max score (10 points) is required</li><li>For grade 4, 60% of max score (15 points) is required</li><li>For grade 5, 80% of max score (20 points) is required</li></ul><p>During the test, you are only allowed to use:</p><ul><li>The computer you sit at to only answer the questions on this exam (you may not run any other program)</li><li>A dictionary to translate to/from English from/to your native language</li><li>Pen and paper to sketch/write notes with (does not need to be submitted)</li></ul><p>Write your answers in either English or Swedish. If you write your answers in Swedish, make sure to not introduce any translation confusement. <strong>Write proper sentences (spelling, upper/lower case characters, punctuation, etc.).</strong> Answers that do not do this good enough/are vague/are ununderstandable cannot receive full score on the questions.</p><p>Answers that are more or less copies of sample answers given to you or copies of text found somewhere else will be rewarded 0 points. Use your own words to answer the questions (does not apply to questions where you write code).</p><p>Good luck!</p><h2 id="question-1-1p" tabindex="-1"><a class="header-anchor" href="#question-1-1p" aria-hidden="true">#</a> Question 1 (1p)</h2><div class="exam-question-container"><div class="exam-question"><h2>Question</h2><p>Place the following lines of code in such order they can be executed (read underscores (<code>____</code>) as white-spaces/indentation (Inspera doesn&#39;t allow the text to begin with white-spaces ðŸ˜ž)).</p><ul><li><code>____color = &quot;#&quot;+number+number+number</code></li><li><code>def get_color():</code></li><li><code>number = input(&quot;Enter number: &quot;)</code></li><li><code>print(color+&quot; is a nice color.&quot;)</code></li><li><code>color = get_color()</code></li><li><code>____return color</code></li></ul><p>You will get:</p><ul><li>1 point for all in correct order</li></ul></div><div class="exam-sample-answer"><h2>Sample answer</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>number <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;Enter number: &quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">def</span> <span class="token function">get_color</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n____color <span class="token operator">=</span> <span class="token string">&quot;#&quot;</span><span class="token operator">+</span>number<span class="token operator">+</span>number<span class="token operator">+</span>number\n____return color\ncolor <span class="token operator">=</span> get_color<span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>color<span class="token operator">+</span><span class="token string">&quot; is a nice color.&quot;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="exam-marking-guidelines"><h2>Marking guidelines</h2><ul><li>1 point for all in correct order</li></ul></div></div><h2 id="question-2-1p" tabindex="-1"><a class="header-anchor" href="#question-2-1p" aria-hidden="true">#</a> Question 2 (1p)</h2><div class="exam-question-container"><div class="exam-question"><h2>Question</h2><p>How many statements and expressions does the following code contain?</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>\n    <span class="token keyword">if</span> a <span class="token operator">&lt;</span> b<span class="token punctuation">:</span>\n        a <span class="token operator">=</span> a <span class="token operator">*</span> <span class="token number">2</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Number of of statements: ...</p><p>Number of expressions: ...</p><p>You will get:</p><ul><li>1 point for both correct</li></ul></div><div class="exam-sample-answer"><h2>Sample answer</h2><p>Number of of statements: <code>3</code></p><p>Number of expressions: <code>7</code></p></div><div class="exam-marking-guidelines"><h2>Marking guidelines</h2><ul><li>1 point for both correct</li></ul></div></div><h2 id="question-3-1p" tabindex="-1"><a class="header-anchor" href="#question-3-1p" aria-hidden="true">#</a> Question 3 (1p)</h2><div class="exam-question-container"><div class="exam-question"><h2>Question</h2><p>What type of error does the code below contain? Syntax error, Logical error, Runtime error or no error at all? The purpose of the function is to compute the sum of the numbers it receives e.g. <code>get_sum(2, 3)</code> â†’ <code>5</code>.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">get_sum</span><span class="token punctuation">(</span>number_1<span class="token punctuation">,</span> number_2<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">return</span> number_1 <span class="token operator">+</span> number <span class="token number">2</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>You will get:</p><ul><li>1 point for correct answer</li></ul></div><div class="exam-sample-answer"><h2>Sample answer</h2><p>Syntax error</p></div><div class="exam-marking-guidelines"><h2>Marking guidelines</h2><ul><li>1 point for correct answer</li></ul></div></div><h2 id="question-4-1p" tabindex="-1"><a class="header-anchor" href="#question-4-1p" aria-hidden="true">#</a> Question 4 (1p)</h2><div class="exam-question-container"><div class="exam-question"><h2>Question</h2><p>What values will be stored in the variables <code>a</code> and <code>b</code> after the following code has been executed?</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token number">3</span>\nb <span class="token operator">=</span> <span class="token number">3</span>\n<span class="token keyword">while</span> a <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>\n    a <span class="token operator">=</span> a <span class="token operator">-</span> <span class="token number">1</span>\n    b <span class="token operator">=</span> b <span class="token operator">+</span> <span class="token number">1</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The variable <code>a</code> will store: ...</p><p>The variable <code>b</code> will store: ...</p><p>You will get:</p><ul><li>1 point for both correct</li></ul></div><div class="exam-sample-answer"><h2>Sample answer</h2><p>The variable <code>a</code> will store: <code>0</code></p><p>The variable <code>b</code> will store: <code>6</code></p></div><div class="exam-marking-guidelines"><h2>Marking guidelines</h2><ul><li>1 point for both correct</li></ul></div></div><h2 id="question-5-1p" tabindex="-1"><a class="header-anchor" href="#question-5-1p" aria-hidden="true">#</a> Question 5 (1p)</h2><div class="exam-question-container"><div class="exam-question"><h2>Question</h2><p>What is what in the code below?</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>radius <span class="token operator">=</span> <span class="token number">1</span>\n<span class="token keyword">def</span> <span class="token function">add_with_radius</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">return</span> radius <span class="token operator">+</span> number\nresult <span class="token operator">=</span> add_with_radius<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Pair each code piece with its corresponding name.</p><p>Code pieces:</p><ul><li><code>number</code></li><li><code>5</code></li><li><code>add_with_radius</code></li><li><code>radius</code></li></ul><p>Names:</p><ul><li>Variable</li><li>Parameter</li><li>Argument</li><li>Function</li></ul><p><strong>Note:</strong> Some code pieces may match multiple names, but there is only one way to get all 4 pairs right.</p><p>You will get:</p><ul><li>1 point for all correct</li></ul></div><div class="exam-sample-answer"><h2>Sample answer</h2><ul><li>Variable - <code>radius</code></li><li>Parameter - <code>number</code></li><li>Argument - <code>5</code></li><li>Function - <code>add_with_radius</code></li></ul></div><div class="exam-marking-guidelines"><h2>Marking guidelines</h2><ul><li>1 point for all correct</li></ul></div></div><h2 id="question-6-1p" tabindex="-1"><a class="header-anchor" href="#question-6-1p" aria-hidden="true">#</a> Question 6 (1p)</h2><div class="exam-question-container"><div class="exam-question"><h2>Question</h2><p>Bart is assigned the task to implement a program that prints this:</p><div style="font-family:monospace;padding-left:2em;"><p>B<br> a<br> a<br> r<br> r<br> r<br> t<br> t<br> t<br> t</p></div><p>Bart writes the following code:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>name <span class="token operator">=</span> <span class="token string">&quot;Bart&quot;</span>\n\n<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    \n    letter <span class="token operator">=</span> name<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n    \n    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span>letter<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Bart&#39;s solution does not work as it should. Explain what errors Bart has done, and suggest how to fix them.</p></div><div class="exam-sample-answer"><h2>Sample answer</h2><p>One problem is that he has <code>range(len(name) + 1)</code>. Because of that, the program will try to print the letter with index <code>4</code>, which doesn&#39;t exist. It should just be <code>range(len(name))</code></p><p>Another problem is that the inner for loop iterates over <code>range(i)</code>. Here, he should instead use <code>range(i + 1)</code>, so for the first letter (<code>i = 0</code>), it will iterate <code>1</code> time, etc.</p></div><div class="exam-marking-guidelines"><h2>Marking guidelines</h2><ul><li>0.25 points for first error</li><li>0.25 points for correct solution to first error</li><li>0.25 points for second error</li><li>0.25 points for correct solution to second error</li></ul></div></div><h2 id="question-7-1p" tabindex="-1"><a class="header-anchor" href="#question-7-1p" aria-hidden="true">#</a> Question 7 (1p)</h2><div class="exam-question-container"><div class="exam-question"><h2>Question</h2><p>The following expression:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Creates a range. What is the sum of the integers in that range?</p></div><div class="exam-sample-answer"><h2>Sample answer</h2><p>The sum is: <code>0</code></p></div><div class="exam-marking-guidelines"><h2>Marking guidelines</h2><ul><li>1 point for correct answer</li></ul></div></div><h2 id="question-8-1p" tabindex="-1"><a class="header-anchor" href="#question-8-1p" aria-hidden="true">#</a> Question 8 (1p)</h2><div class="exam-question-container"><div class="exam-question"><h2>Question</h2><p>What non-negative integers should be assigned to the variables <code>x</code> and <code>y</code> to slice out the values <code>&quot;d&quot;</code> and <code>&quot;e&quot;</code> in the code below?</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>my_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;d&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;e&quot;</span><span class="token punctuation">]</span>\nx <span class="token operator">=</span> ?\ny <span class="token operator">=</span> ?\nmy_new_list <span class="token operator">=</span> my_list<span class="token punctuation">[</span>x<span class="token punctuation">:</span>y<span class="token punctuation">]</span>\n<span class="token comment"># my_new_list should now be [&quot;d&quot;, &quot;e&quot;]</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You will get:</p><ul><li>1 point for both correct</li></ul></div><div class="exam-sample-answer"><h2>Sample answer</h2><p><code>x</code>: <code>3</code></p><p><code>y</code>: <code>5</code></p></div><div class="exam-marking-guidelines"><h2>Marking guidelines</h2><ul><li>1 point for both correct</li></ul></div></div><h2 id="question-9-1p" tabindex="-1"><a class="header-anchor" href="#question-9-1p" aria-hidden="true">#</a> Question 9 (1p)</h2><div class="exam-question-container"><div class="exam-question"><h2>Question</h2><p>Write the following code:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>my_list <span class="token operator">=</span> <span class="token punctuation">[</span>x<span class="token operator">*</span><span class="token number">2</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> numbers<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">]</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>As statements using a loop instead. Your own code should have the exact same meaning as the code above.</p></div><div class="exam-sample-answer"><h2>Sample answer</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>my_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token keyword">for</span> x <span class="token keyword">in</span> numbers<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">if</span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>\n        my_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="exam-marking-guidelines"><h2>Marking guidelines</h2><ul><li>1 point for an answer that is largely correct</li><li>Point reduction for errors: <ul><li>-0.1 points for missing <code>:</code></li><li>-0.1 points for spelling variable wrong</li><li>-0.25 points for indentation error</li></ul></li></ul></div></div><h2 id="question-10-1p" tabindex="-1"><a class="header-anchor" href="#question-10-1p" aria-hidden="true">#</a> Question 10 (1p)</h2><div class="exam-question-container"><div class="exam-question"><h2>Question</h2><p>Here is a quite complex structure with information about different movies:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>movies <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token string">&quot;action&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;GoldenEye&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;runtime&quot;</span><span class="token punctuation">:</span> <span class="token number">110</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Mission Impossible&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;runtime&quot;</span><span class="token punctuation">:</span> <span class="token number">115</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Pearl Harbor&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;runtime&quot;</span><span class="token punctuation">:</span> <span class="token number">160</span><span class="token punctuation">}</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;drama&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Titanic&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;runtime&quot;</span><span class="token punctuation">:</span> <span class="token number">180</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Love Actually&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;runtime&quot;</span><span class="token punctuation">:</span> <span class="token number">120</span><span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Given this very structure, write an <strong>expression</strong> that evaluates to the runtime of the movie with the name <code>Mission Impossible</code>, i.e. <code>115</code>.</p><p><strong>Note</strong>: Do not write a statement, and simply writing <code>115</code> is of course not OK; the value needs to be retrieved from the structure.</p></div><div class="exam-sample-answer"><h2>Sample answer</h2><p><code>movies[&quot;action&quot;][1][&quot;runtime&quot;]</code></p></div><div class="exam-marking-guidelines"><h2>Marking guidelines</h2><ul><li>0 points for an answer being a statement</li><li>1 point for an answer that is an expression that works <ul><li>-0.5 points for not having quotes around <code>action</code> or <code>runtime</code></li></ul></li></ul></div></div><h2 id="question-11-1p" tabindex="-1"><a class="header-anchor" href="#question-11-1p" aria-hidden="true">#</a> Question 11 (1p)</h2><div class="exam-question-container"><div class="exam-question"><h2>Question</h2><p>Suggest how the data in the XML code below:</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>games</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>game</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Super Mario Bros.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>year</span><span class="token punctuation">&gt;</span></span>1985<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>year</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>game</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>game</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>The Legend of Zelda: A Link to the Past<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>year</span><span class="token punctuation">&gt;</span></span>1991<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>year</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>game</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>games</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Can be represented in Python (i.e. create a Python variable with a descriptive name that contains the same data as the XML code above does).</p><p><strong>Note</strong>: This question is not about writing Python code that reads data from the XML code; you should just write Python code that creates a variable that contains the same (hard coded) data that is currently shown in the XML code above.</p></div><div class="exam-sample-answer"><h2>Sample answer</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>games <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n    <span class="token string">&quot;title&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Super Mario Bros.&quot;</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;year&quot;</span><span class="token punctuation">:</span> <span class="token number">1985</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    <span class="token string">&quot;title&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;The Legend of Zelda: A Link to the Past&quot;</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;year&quot;</span><span class="token punctuation">:</span> <span class="token number">1991</span>\n<span class="token punctuation">}</span><span class="token punctuation">]</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="exam-marking-guidelines"><h2>Marking guidelines</h2><ul><li>1 point for an answer that largely works</li><li>Point reduction for errors: <ul><li>-0.25 points for bad variable name (like <code>game</code> instead of <code>games</code>)</li><li>-0.25 points for a dict (instead of list) that contains dict games</li><li>-0.25 points for representing year as string</li></ul></li></ul></div></div><h2 id="question-12-1p" tabindex="-1"><a class="header-anchor" href="#question-12-1p" aria-hidden="true">#</a> Question 12 (1p)</h2><div class="exam-question-container"><div class="exam-question"><h2>Question</h2><p>Suggest how the data in the XML code below:</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>games</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>game</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Super Mario Bros.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>year</span><span class="token punctuation">&gt;</span></span>1985<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>year</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>game</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>game</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>The Legend of Zelda: A Link to the Past<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>year</span><span class="token punctuation">&gt;</span></span>1991<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>year</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>game</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>game</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Can be expressed in CSV format.</p><p><strong>Note</strong>: This question is not about writing Python code, but CSV code.</p><p><strong>Note</strong>: Do not write any extra characters not needed.</p></div><div class="exam-sample-answer"><h2>Sample answer</h2><div class="language-csv line-numbers-mode" data-ext="csv"><pre class="language-csv"><code><span class="token value">Super Mario Bros.</span><span class="token punctuation">,</span><span class="token value">1985</span>\n<span class="token value">The Legend of Zelda: A Link to the Past</span><span class="token punctuation">,</span><span class="token value">1991</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="exam-marking-guidelines"><h2>Marking guidelines</h2><ul><li>1 point for an answer that largely works</li><li>Point reduction for errors: <ul><li>-0.25 points for writing extra characters not needed (such as spaces and <code>&quot;</code>)</li></ul></li></ul></div></div><h2 id="question-13-1p" tabindex="-1"><a class="header-anchor" href="#question-13-1p" aria-hidden="true">#</a> Question 13 (1p)</h2><div class="exam-question-container"><div class="exam-question"><h2>Question</h2><p>What will be stored in the variable <code>sum</code> after the following code has been executed?</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">a</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    number <span class="token operator">=</span> number <span class="token operator">+</span> <span class="token number">2</span>\n\n<span class="token keyword">def</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">for</span> number <span class="token keyword">in</span> <span class="token builtin">list</span><span class="token punctuation">:</span>\n        number <span class="token operator">=</span> number <span class="token operator">+</span> <span class="token number">1</span>\n\n<span class="token keyword">def</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token builtin">list</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">3</span>\n\nmy_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>\n\na<span class="token punctuation">(</span>my_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\nc<span class="token punctuation">(</span>my_list<span class="token punctuation">)</span>\nb<span class="token punctuation">(</span>my_list<span class="token punctuation">)</span>\nc<span class="token punctuation">(</span>my_list<span class="token punctuation">)</span>\n\n<span class="token builtin">sum</span> <span class="token operator">=</span> my_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> my_list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="exam-sample-answer"><h2>Sample answer</h2><p><code>sum</code>: <code>13</code></p></div><div class="exam-marking-guidelines"><h2>Marking guidelines</h2><ul><li>1 point for correct answer</li></ul></div></div><h2 id="question-14-1p" tabindex="-1"><a class="header-anchor" href="#question-14-1p" aria-hidden="true">#</a> Question 14 (1p)</h2><div class="exam-question-container"><div class="exam-question"><h2>Question</h2><p>Implement the function <code>get_number_of_digits()</code>, which receives an integer, and should return the number digits that integer contains. The integer the function receives will always be between <code>1</code> and <code>999</code>.</p><p>Sample usage:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>get_number_of_digits(8)   â†’   1\nget_number_of_digits(9)   â†’   1\nget_number_of_digits(23)   â†’   2\nget_number_of_digits(471)   â†’   3\nget_number_of_digits(892)   â†’   3\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="exam-sample-answer"><h2>Sample answer</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">get_number_of_digits</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">if</span> integer <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">:</span>\n        <span class="token keyword">return</span> <span class="token number">1</span>\n    <span class="token keyword">elif</span> integer <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">:</span>\n        <span class="token keyword">return</span> <span class="token number">2</span>\n    <span class="token keyword">else</span><span class="token punctuation">:</span>\n        <span class="token keyword">return</span> <span class="token number">3</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="exam-marking-guidelines"><h2>Marking guidelines</h2><ul><li>1 point for a solution that works</li><li>Point reduction for small mistakes or doing weird things: <ul><li>-0.1 points for each forgotten <code>:</code>, <code>=</code>, <code>def</code> etc.</li><li>-0.1 points for writing <code>=&lt;</code> instead of <code>&lt;=</code></li><li>-0.1 points for each bad variable name</li><li>-1 point for using a loop</li></ul></li></ul><p>OR:</p><ul><li>0.25 points for using <code>len</code> to compute the number of digits without converting the number to a string first</li></ul></div></div><h2 id="question-15-2p" tabindex="-1"><a class="header-anchor" href="#question-15-2p" aria-hidden="true">#</a> Question 15 (2p)</h2><div class="exam-question-container"><div class="exam-question"><h2>Question</h2><p>Write a program that keeps asking the user to enter an integer until the user enters <code>stop</code>. The program should count how many odd respective even (the opposite to odd) integers the user entered, and then show that to the user. To check if <code>an_integer</code> is odd, you can use the expression <code>an_integer % 2 == 1</code>. When running the program, it can look like this (bold text represents text entered by the user).</p><div style="font-family:&#39;Courier New&#39;;"><p>Enter an integer or stop: <strong>8</strong><br> Enter an integer or stop: <strong>3</strong><br> Enter an integer or stop: <strong>4</strong><br> Enter an integer or stop: <strong>9</strong><br> Enter an integer or stop: <strong>5</strong><br> Enter an integer or stop: <strong>stop</strong><br> You entered 3 odd integers and 2 even integers.</p></div><p><strong>Note</strong>: The output should look precisely as in the example above (including white-spaces, but with the exception of the boldness from the input, of course).</p><p><strong>Note</strong>: You can expect the user to actually enter an integer or <code>stop</code> (no error handling needed).</p></div><div class="exam-sample-answer"><h2>Sample answer</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>number_of_odd_integers <span class="token operator">=</span> <span class="token number">0</span>\nnumber_of_even_integers <span class="token operator">=</span> <span class="token number">0</span>\n\nentered_text <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>\n\n<span class="token keyword">while</span> entered_text <span class="token operator">!=</span> <span class="token string">&quot;stop&quot;</span><span class="token punctuation">:</span>\n    \n    entered_text <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;Enter an integer or stop: &quot;</span><span class="token punctuation">)</span>\n    \n    <span class="token keyword">if</span> entered_text <span class="token operator">!=</span> <span class="token string">&quot;stop&quot;</span><span class="token punctuation">:</span>\n        \n        entered_integer <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>entered_text<span class="token punctuation">)</span>\n        \n        <span class="token keyword">if</span> entered_integer <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>\n            number_of_odd_integers <span class="token operator">+=</span> <span class="token number">1</span>\n        <span class="token keyword">else</span><span class="token punctuation">:</span>\n            number_of_even_integers <span class="token operator">+=</span> <span class="token number">1</span>\n\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;You entered &quot;</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>number_of_odd_integers<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot; odd integers and &quot;</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>number_of_even_integers<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot; even integers.&quot;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="exam-marking-guidelines"><h2>Marking guidelines</h2><ul><li>2 points for a program that largely works</li><li>Point reduction for small mistakes or doing weird things: <ul><li>-0.1 points for each bad variable name</li><li>-0.1 points for each forgotten/wrong <code>:</code>, <code>=</code>, etc.</li><li>-0.1 points for each misspelled <code>while</code>, <code>print</code>, <code>True</code> etc.</li><li>-0.25 points for <code>int(&quot;stop&quot;)</code></li><li>-0.25 points for not using quotes around strings</li><li>-0.25 points for using a variable before it has been assigned a value</li><li>-0.25 points for not converting the entered number to an int</li><li>-0.25 point for using <code>print()</code> in each iteration</li><li>-0.5 points for returning when one shouldn&#39;t</li><li>-1 point for only asking for input once (never in the loop)</li></ul></li></ul></div></div><h2 id="question-16-2p" tabindex="-1"><a class="header-anchor" href="#question-16-2p" aria-hidden="true">#</a> Question 16 (2p)</h2><div class="exam-question-container"><div class="exam-question"><h2>Question</h2><p>Implement the function <code>are_all_equal</code>, which receives a list of numbers, and returns:</p><ul><li><code>True</code> if all numbers in the list are equal</li><li><code>False</code> otherwise</li></ul><p>Write two different implementations of the function: one using a <code>while</code> loop, and another one using a <code>for</code> loop.</p><p>Sample usage:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>are_all_equal([1, 1, 1, 1]) â†’ True\nare_all_equal([5, 5, 5])    â†’ True\nare_all_equal([1, 2, 3])    â†’ False\nare_all_equal([7, 7, 8])    â†’ False\nare_all_equal([])           â†’ True\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Note</strong>: If the list is empty, return <code>True</code>.</p></div><div class="exam-sample-answer"><h2>Sample answer</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">are_all_equal</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">for</span> number <span class="token keyword">in</span> numbers<span class="token punctuation">:</span>\n        <span class="token keyword">if</span> number <span class="token operator">!=</span> numbers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>\n            <span class="token keyword">return</span> <span class="token boolean">False</span>\n    <span class="token keyword">return</span> <span class="token boolean">True</span>\n\n<span class="token keyword">def</span> <span class="token function">are_all_equal</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    index <span class="token operator">=</span> <span class="token number">0</span>\n    <span class="token keyword">while</span> index <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">if</span> numbers<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">!=</span> numbers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>\n            <span class="token keyword">return</span> <span class="token boolean">False</span>\n        index <span class="token operator">+=</span> <span class="token number">1</span>\n    <span class="token keyword">return</span> <span class="token boolean">True</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="exam-marking-guidelines"><h2>Marking guidelines</h2><ul><li>0 points for solutions that always return <code>True</code>/<code>False</code> in the first iteration</li><li>1 point for the function with the <code>for</code> loop largely working</li><li>1 point for the function with the <code>while</code> loop largely working</li><li>Point reduction for small mistakes or doing weird things: <ul><li>-0.1 points for writing <code>=&lt;</code> instead of <code>&lt;=</code>, and similar</li><li>-0.25 points for crashing if the list is empty</li><li>-0.25 for not having <code>def</code></li><li>-0.25 points for iterating over indexes in the <code>for</code> loop</li><li>-0.25 points for not initializing iteration variable in <code>while</code> loop</li></ul></li></ul></div></div><h2 id="question-17-3p" tabindex="-1"><a class="header-anchor" href="#question-17-3p" aria-hidden="true">#</a> Question 17 (3p)</h2><div class="exam-question-container"><div class="exam-question"><h2>Question</h2><p>Below is some data about houses owned by some humans.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>houses <span class="token operator">=</span> <span class="token punctuation">[</span>\n   <span class="token punctuation">{</span><span class="token string">&quot;owner&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Alice&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Alice&#39;s Palace&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;number_of_rooms&quot;</span><span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token string">&quot;number_of_windows&quot;</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n   <span class="token punctuation">{</span><span class="token string">&quot;owner&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Alice&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Alice&#39;s Home&quot;</span><span class="token punctuation">,</span>   <span class="token string">&quot;number_of_rooms&quot;</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&quot;number_of_windows&quot;</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n   <span class="token punctuation">{</span><span class="token string">&quot;owner&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Alice&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Alice&#39;s Cabin&quot;</span><span class="token punctuation">,</span>  <span class="token string">&quot;number_of_rooms&quot;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;number_of_windows&quot;</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n   <span class="token punctuation">{</span><span class="token string">&quot;owner&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Bob&quot;</span><span class="token punctuation">,</span>   <span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Bob&#39;s Home&quot;</span><span class="token punctuation">,</span>     <span class="token string">&quot;number_of_rooms&quot;</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&quot;number_of_windows&quot;</span><span class="token punctuation">:</span> <span class="token number">16</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n   <span class="token punctuation">{</span><span class="token string">&quot;owner&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Bob&quot;</span><span class="token punctuation">,</span>   <span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Bob&#39;s Cabin&quot;</span><span class="token punctuation">,</span>    <span class="token string">&quot;number_of_rooms&quot;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;number_of_windows&quot;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It&#39;s cold in the winter, and it costs money to heat the houses. To heat a single house costs:</p><ul><li>100 SEK each month...</li><li>...+ 10 SEK each month for each room in the house...</li><li>...+ 50 SEK each month for each window in the house</li></ul><p>Write code that first computes which house that has the highest heating cost. Then compute how big heating cost the owner of that house has for all the houses that human owns together, and show that to the user.</p><p><strong>Note</strong>: Your code should still work as expected if one adds/removes houses to/from the list. <code>Alice</code> and <code>Bob</code> are not the only ones who can own a house.</p></div><div class="exam-sample-answer"><h2>Sample answer</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>heat_base_cost_per_house <span class="token operator">=</span> <span class="token number">100</span>\nheat_cost_per_room <span class="token operator">=</span> <span class="token number">10</span>\nheat_cost_per_window <span class="token operator">=</span> <span class="token number">50</span>\n\n<span class="token keyword">def</span> <span class="token function">get_heating_cost</span><span class="token punctuation">(</span>house<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n        heat_base_cost_per_house <span class="token operator">+</span>\n        heat_cost_per_room <span class="token operator">*</span> house<span class="token punctuation">[</span><span class="token string">&quot;number_of_rooms&quot;</span><span class="token punctuation">]</span> <span class="token operator">+</span>\n        heat_cost_per_window <span class="token operator">*</span> house<span class="token punctuation">[</span><span class="token string">&quot;number_of_windows&quot;</span><span class="token punctuation">]</span>\n    <span class="token punctuation">)</span>\n\n<span class="token comment"># Find the house with the highest heating cost.</span>\nhighest_heating_cost_house <span class="token operator">=</span> houses<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment"># Assume the first house to start with.</span>\n\n<span class="token keyword">for</span> house <span class="token keyword">in</span> houses<span class="token punctuation">:</span>\n    \n    <span class="token keyword">if</span> get_heating_cost<span class="token punctuation">(</span>highest_heating_cost_house<span class="token punctuation">)</span> <span class="token operator">&lt;</span> get_heating_cost<span class="token punctuation">(</span>house<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        highest_heating_cost_house <span class="token operator">=</span> house\n\n<span class="token comment"># Find the total cost that owner pays.</span>\ntotal_cost <span class="token operator">=</span> <span class="token number">0</span>\n\n<span class="token keyword">for</span> house <span class="token keyword">in</span> houses<span class="token punctuation">:</span>\n    <span class="token keyword">if</span> highest_heating_cost_house<span class="token punctuation">[</span><span class="token string">&quot;owner&quot;</span><span class="token punctuation">]</span> <span class="token operator">==</span> house<span class="token punctuation">[</span><span class="token string">&quot;owner&quot;</span><span class="token punctuation">]</span><span class="token punctuation">:</span>\n        total_cost <span class="token operator">+=</span> get_heating_cost<span class="token punctuation">(</span>house<span class="token punctuation">)</span>\n\n<span class="token comment"># Show the result.</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;The one with the most expensive heating cost for a single house pays &quot;</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>total_cost<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot; in heating cost for all houses that one owns.&quot;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="exam-marking-guidelines"><h2>Marking guidelines</h2><ul><li>1.5 point for computing the house with highest heating cost</li><li>1.5 point for computing sum of heating the houses owned by that owner</li><li>Point reduction for small mistakes or doing weird things: <ul><li>-0.25 points for each bad name</li><li>-0.25 points for iterating over indexes instead of values</li></ul></li></ul></div></div><h2 id="question-18-2p" tabindex="-1"><a class="header-anchor" href="#question-18-2p" aria-hidden="true">#</a> Question 18 (2p)</h2><div class="exam-question-container"><div class="exam-question"><h2>Question</h2><p>The class <code>Population</code> represents a population of humans.</p><p>The class has the following constructor/methods:</p><table><thead><tr><th>Constructor/Method</th><th>Description</th></tr></thead><tbody><tr><td><code>Population()</code></td><td>Creates a new empty population</td></tr><tr><td><code>add_human(name, is_female)</code></td><td>Adds one human to the population with the given <code>name</code> (string) and the given <code>is_female</code> (<code>True</code> for females, <code>False</code> for males)</td></tr><tr><td><code>get_percentage_females()</code></td><td>Returns the percentage (a number between <code>0</code> and <code>100</code>) of the population that are females</td></tr><tr><td><code>get_percentage_males()</code></td><td>Returns the percentage (a number between <code>0</code> and <code>100</code>) of the population that are males</td></tr></tbody></table><p>Write a program making use of the class. In the program, you should continue to ask the user to enter the name, sex and age of a human until the user doesn&#39;t want to add any more. Then the program should print how many percentages of the population that are females respective males.</p><p>Sample usage:</p><div style="font-family:monospace;padding-left:2em;"><p>Enter one more human? (yes/no): <strong>yes</strong><br> Enter name: <strong>Alice</strong><br> Enter sex (female/male): <strong>female</strong><br> Enter one more human? (yes/no): <strong>yes</strong><br> Enter name: <strong>Bob</strong><br> Enter sex (female/male): <strong>male</strong><br> Enter one more human? (yes/no): <strong>yes</strong><br> Enter name: <strong>Claire</strong><br> Enter sex (female/male): <strong>female</strong><br> Enter one more human? (yes/no): <strong>yes</strong><br> Enter name: <strong>Denise</strong><br> Enter sex (female/male): <strong>female</strong><br> Enter one more human? (yes/no): <strong>no</strong><br> 75% of the population are females.<br> 25% of the population are males.</p></div><p><strong>Note</strong>: The output should look precisely as in the example above (including white-spaces, but with the exception of the boldness from the input, of course). It is OK if the percentage numbers on the last two lines show decimal numbers.</p><p><strong>Note</strong>: No error handling is needed; you can expect the user to always enter valid values.</p></div><div class="exam-sample-answer"><h2>Sample answer</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>population <span class="token operator">=</span> Population<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\nshould_continue_to_ask <span class="token operator">=</span> <span class="token boolean">True</span>\n\n<span class="token keyword">while</span> should_continue_to_ask<span class="token punctuation">:</span>\n    \n    add_one_more_answer <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;Enter one more human? (yes/no): &quot;</span><span class="token punctuation">)</span>\n    \n    <span class="token keyword">if</span> add_one_more_answer <span class="token operator">==</span> <span class="token string">&quot;yes&quot;</span><span class="token punctuation">:</span>\n        \n        name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;Enter name: &quot;</span><span class="token punctuation">)</span>\n        sex <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;Enter sex (female/male): &quot;</span><span class="token punctuation">)</span>\n        \n        is_female <span class="token operator">=</span> <span class="token punctuation">(</span>sex <span class="token operator">==</span> <span class="token string">&quot;female&quot;</span><span class="token punctuation">)</span>\n        \n        population<span class="token punctuation">.</span>add_human<span class="token punctuation">(</span>name<span class="token punctuation">,</span> is_female<span class="token punctuation">)</span>\n        \n    <span class="token keyword">else</span><span class="token punctuation">:</span>\n        should_continue_to_ask <span class="token operator">=</span> <span class="token boolean">False</span>\n\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>population<span class="token punctuation">.</span>get_percentage_females<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;% of the population are females.&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>population<span class="token punctuation">.</span>get_percentage_males<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;% of the population are males.&quot;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="exam-marking-guidelines"><h2>Marking guidelines</h2><ul><li>2 points for an answer that largely works</li><li>Point reduction for errors: <ul><li>-0.1 points for each bad variable name</li><li>-0.1 points for <code>While</code></li><li>-0.25 points for never exiting the loop</li></ul></li></ul></div></div><h2 id="question-19-2p" tabindex="-1"><a class="header-anchor" href="#question-19-2p" aria-hidden="true">#</a> Question 19 (2p)</h2><div class="exam-question-container"><div class="exam-question"><h2>Question</h2><p>The class <code>Population</code> represents a population of humans.</p><p>The class has the following constructor/methods:</p><table><thead><tr><th>Constructor/Method</th><th>Description</th></tr></thead><tbody><tr><td><code>Population()</code></td><td>Creates a new empty population</td></tr><tr><td><code>add_human(name, is_female)</code></td><td>Adds one human to the population with the given <code>name</code> (string) and the given <code>is_female</code> (<code>True</code> for females, <code>False</code> for males)</td></tr><tr><td><code>get_percentage_females()</code></td><td>Returns the percentage (a number between <code>0</code> and <code>100</code>) of the population that are females</td></tr><tr><td><code>get_percentage_males()</code></td><td>Returns the percentage (a number between <code>0</code> and <code>100</code>) of the population that are males</td></tr></tbody></table><p>Implement the class per the description above.</p></div><div class="exam-sample-answer"><h2>Sample answer</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Population</span><span class="token punctuation">:</span>\n    \n    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        self<span class="token punctuation">.</span>humans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    \n    <span class="token keyword">def</span> <span class="token function">add_human</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> is_female<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        \n        self<span class="token punctuation">.</span>humans<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">{</span>\n            <span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> name<span class="token punctuation">,</span>\n            <span class="token string">&quot;is_female&quot;</span><span class="token punctuation">:</span> is_female\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    \n    <span class="token keyword">def</span> <span class="token function">get_percentage_females</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        \n        number_of_females <span class="token operator">=</span> <span class="token number">0</span>\n        \n        <span class="token keyword">for</span> human <span class="token keyword">in</span> self<span class="token punctuation">.</span>humans<span class="token punctuation">:</span>\n            <span class="token keyword">if</span> human<span class="token punctuation">[</span><span class="token string">&quot;is_female&quot;</span><span class="token punctuation">]</span><span class="token punctuation">:</span>\n                number_of_females <span class="token operator">+=</span> <span class="token number">1</span>\n        \n        <span class="token keyword">return</span> number_of_females <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>humans<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span>\n    \n    <span class="token keyword">def</span> <span class="token function">get_percentage_males</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">return</span> <span class="token number">100</span> <span class="token operator">-</span> self<span class="token punctuation">.</span>get_percentage_females<span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="exam-marking-guidelines"><h2>Marking guidelines</h2><ul><li>0 points to answers not using the <code>self</code> parameter at all, or using class variables instead of instance variables</li><li>2 points for a solution that largely works</li><li>Point reductions for errors: <ul><li>-0.1 points for <code>Class</code></li><li>-0.1 points for naming the class wrong</li><li>-0.25 points for not having <code>def</code></li></ul></li></ul></div></div>', 49);
const _hoisted_50 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache) {
  return openBlock(), createElementBlock("div", null, _hoisted_50);
}
const exam20230215_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "exam-2023-02-15.html.vue"]]);
export {
  exam20230215_html as default
};
